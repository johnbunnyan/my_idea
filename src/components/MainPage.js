import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';


import './MainPage.css'; // CSS ÌååÏùº import

function MainPage() {
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false); // ÌÖçÏä§Ìä∏ ÏûÖÎ†• Ï§ëÏù∏ÏßÄ Ïó¨Î∂ÄÎ•º Í¥ÄÎ¶¨
  const [circles, setCircles] = useState([]); // Ïõê Ï†ïÎ≥¥Î•º Ï†ÄÏû•Ìï† JSON Î∞∞Ïó¥
  const [pageHeight, setPageHeight] = useState(window.innerHeight); // ÌéòÏù¥ÏßÄ ÎÜíÏù¥ ÏÉÅÌÉú Ï∂îÍ∞Ä

  
  const navigate = useNavigate();
  const containerRef = useRef(null); // Ïä§ÌÅ¨Î°§ Ï°∞Ï†ïÏùÑ ÏúÑÌï¥ ref Ï∂îÍ∞Ä

  useEffect(() => {
    const savedCircles = JSON.parse(localStorage.getItem('circles'));
    if (savedCircles) {
      setCircles(savedCircles);
    }
  }, []);

  useEffect(() => {
    const intervalId = setInterval(() => {
      const now = Date.now();
      // NOTE hourCheck();

      const updatedCircles = circles.map(circle => {
        const age = now - circle.createdAt;
    //const minutes = age / (1000 * 60);
    const hours = age / (1000 * 60 * 60);

    if (hours >= 12) {
      return null; // ÏõêÏùÑ ÏÇ≠Ï†ú
    }

    // if (minutes >= 1) {
    //   return null; // ÏõêÏùÑ ÏÇ≠Ï†ú
    // }

       // const opacity = Math.max(0, 1 - (hours / 12));
        //const newColor = hexToRgb(circle.color, opacity);
        let remainingTime = (1 - hours / 12) * 100;
        return {
          ...circle,
          color: remainingTime <= 3 ? 'red' : circle.color,
          remainingTime: remainingTime
        };
      }).filter(Boolean);

      setCircles(updatedCircles);
      localStorage.setItem('circles', JSON.stringify(updatedCircles));
    }, 1000); // 1Î∂ÑÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏

    
    return () => clearInterval(intervalId);
  }, [circles]);

  // const hexToRgb = (hex, opacity) => {
  //   const bigint = parseInt(hex.slice(1), 16);
  //   const r = (bigint >> 16) & 255;
  //   const g = (bigint >> 8) & 255;
  //   const b = bigint & 255;
  //   return `rgba(${r},${g},${b},${opacity})`;
  // };

   
  // NOTE
  //  const hourCheck = () => {
  //   const now = new Date();
  //     const currentHour = now.getHours();
      
  //     if (currentHour >= 0 && currentHour < 9) {
  //       // ÏûêÏ†ï 00ÏãúÎ∂ÄÌÑ∞ ÏïÑÏπ® 9ÏãúÍπåÏßÄÎäî remainingTimeÏùÑ ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏßÄ ÏïäÏùå
  //       return;
  //     }
  //  };


  const saveCirclesToLocalStorage = (circles) => {
    localStorage.setItem('circles', JSON.stringify(circles)); // Ïõê Ï†ïÎ≥¥Î•º Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
  };

  

  
  const handleInputChange = (e) => {
    // ÌïúÍ∏Ä ÏûÖÎ†• ÏÉÅÌÉúÏù∏ÏßÄ ÌôïÏù∏
    const isKoreanInput = e.nativeEvent.isComposing || e.nativeEvent.inputType === 'insertCompositionText';
    if (!isKoreanInput) {
      setInputText(e.target.value);
    }else{
      setIsTyping(false)
      setInputText(e.target.value);
    }
  };

  const handleInputKeyDown = (e) => {
    if (e.key === 'Enter' && !isTyping) {
      handleButtonClick();
    }
  };

//   // Ï§ëÎ≥µÎêú ÌÖçÏä§Ìä∏ ÌåêÎ≥ÑÏùÑ ÏúÑÌïú Ìï®Ïàò
// const isDuplicateText = (text) => {
//   return circles.some(circle => circle.text === text);
// };



  const handleButtonClick = () => {
    if (/^[\u3131-\uD79D]+$/.test(inputText.trim()) && inputText.trim().length === 1) {
      setInputText('');
      return; // ÌïúÍ∏ÄÎ°ú Ìïú Í∏ÄÏûêÏù∏ Í≤ΩÏö∞ Î¨¥Ïãú
    }

    if (inputText.trim() === '') {
      return; // ÏûÖÎ†•Îêú ÌÖçÏä§Ìä∏Í∞Ä ÏóÜÏúºÎ©¥ Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
    }
    console.log(inputText)

//     // Ï§ëÎ≥µÎêú ÌÖçÏä§Ìä∏Ïù∏ÏßÄ ÌôïÏù∏
//  if (isDuplicateText(inputText)) {
//   alert('Ïù¥ÎØ∏ ÏûÖÎ†•Îêú ÌÖçÏä§Ìä∏ÏûÖÎãàÎã§.'); // Ï§ëÎ≥µÎêú ÌÖçÏä§Ìä∏Ïùº Í≤ΩÏö∞ ÌåùÏóÖ ÏïåÎûå ÌëúÏãú
//   return;
// }

     // Ï§ëÎ≥µÎêú ÌÖçÏä§Ìä∏Ïù∏ÏßÄ ÌôïÏù∏
  const existingCircle = circles.find(circle => circle.text === inputText);
  if (existingCircle) {
    // Ï§ëÎ≥µÎêú ÌÖçÏä§Ìä∏Ïùº Í≤ΩÏö∞ ÌÅ¥Î¶≠ ÌöüÏàò Ï¶ùÍ∞Ä
    const updatedCircles = circles.map(circle =>
      circle.text === inputText
        ? { ...circle, clicks: circle.clicks + 1, createdAt: Date.now(), remainingTime: 100 }
        : circle
    );
    setCircles(updatedCircles);

    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê ÏóÖÎç∞Ïù¥Ìä∏Îêú Ïõê Ï†ïÎ≥¥ Ï†ÄÏû•
    saveCirclesToLocalStorage(updatedCircles);
  } else {
    // Ï§ëÎ≥µÎêú ÌÖçÏä§Ìä∏Í∞Ä ÏïÑÎãê Í≤ΩÏö∞ ÏÉàÎ°úÏö¥ Ïõê Ï∂îÍ∞Ä
    const newCircle = {
      id: `circle-${Date.now()}`, // Í≥†Ïú†Ìïú ID ÏÉùÏÑ±
      text: inputText,
      color: randomColor(),
      position:randomNonOverlappingPosition(circles),
      clicks: 0, // ÌÅ¥Î¶≠ ÌöüÏàò Ï¥àÍ∏∞Ìôî
      createdAt: Date.now(),
      remainingTime: 100 // Ï≤òÏùåÏóêÎäî 100%Î°ú ÏãúÏûë
    };

  

    const newCircles = [...circles, newCircle];
    setCircles(newCircles);
    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê ÏóÖÎç∞Ïù¥Ìä∏Îêú Ïõê Ï†ïÎ≥¥ Ï†ÄÏû•
    saveCirclesToLocalStorage(newCircles);
    };


    setInputText('');
    setIsTyping(false); // ÏûÖÎ†•Ïù¥ ÏôÑÎ£åÎê®ÏùÑ ÌëúÏãú
  };

  const handleComponentClick = (index) => {

    handleMoveToDetail(index);
  };

  // ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÎäî Ìï®Ïàò
  const handleMoveToDetail = (index) => {
    navigate(`/detail/${index}`, { state: { index: index } });
  };

  const handleResetButtonClick = () => {
    setCircles([]); // ÏÉùÏÑ±Îêú ÏõêÎì§ Ï¥àÍ∏∞Ìôî
    localStorage.removeItem('circles'); // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞
  };



  // const randomPosition = () => {
  //   // ÎûúÎç§Ìïú ÏúÑÏπò ÏÉùÏÑ±
  //   return {
  //     left: `${Math.random() * 70 + 15}%`,
  //     top: `${Math.random() * 60 + 5}%` // Îçî Î©ÄÎ¶¨ Îñ®Ïñ¥Îú®Î¶¨Í∏∞ ÏúÑÌï¥ Î≤îÏúÑ ÏàòÏ†ï
  //   };
  // };

  const randomColor = () => {
    // ÎûúÎç§Ìïú ÏÉâÏÉÅ ÏÉùÏÑ±
    const hash = Math.random().toString(16).slice(2, 8);
    return `#${hash}`;
  };

  // const adjustColorBrightness = (color, amount) => {
  //   // ÏÉâÏÉÅÏùò Î∞ùÍ∏∞Î•º Ï°∞Ï†àÌïòÏó¨ Î∞òÌôò
  //   return '#' + color.match(/[0-9a-f]{2}/g).map(channel => {
  //     const value = parseInt(channel, 16);
  //     const adjustedValue = Math.min(255, value + amount);
  //     return adjustedValue.toString(16).padStart(2, '0');
  //   }).join('');
  // };



 // Í≤πÏπòÏßÄ ÏïäÎäî ÏúÑÏπòÎ•º Ï∞æÍ∏∞ ÏúÑÌïú Ìï®Ïàò
const randomNonOverlappingPosition = (existingCircles) => {
  const newPosition = () => {
    return {
      left: `${Math.random() * 70 + 15}%`,
      top: `${Math.random() * pageHeight}px`
    };
  };

  let position;
  let attempts = 0;

  do {
    position = newPosition();
    attempts++;
  } while (isOverlapping(position, existingCircles) && attempts < 100);

  if (attempts === 100) {
    // Í≤πÏπòÏßÄ ÏïäÎäî ÏúÑÏπòÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏúºÎ©¥ ÌéòÏù¥ÏßÄ ÎÜíÏù¥ Ï¶ùÍ∞Ä
    setPageHeight(prevHeight => prevHeight + 200);
    position = newPosition();
  }

  return position;
};

// ÏúÑÏπòÍ∞Ä Í≤πÏπòÎäîÏßÄ ÌôïÏù∏ÌïòÎäî Ìï®Ïàò
const isOverlapping = (position, existingCircles) => {
  const radius = 25; // ÏõêÏùò Î∞òÏßÄÎ¶Ñ 25px
  const padding = 10; // Ï∂îÍ∞Ä Ìå®Îî©

  return existingCircles.some(circle => {
    const distance = calculateDistance(
      parseFloat(position.left),
      parseFloat(position.top),
      parseFloat(circle.position.left),
      parseFloat(circle.position.top)
    );
    return distance < (2 * radius + padding); // ÏõêÏùò Îëê Î∞∞ Î∞òÏßÄÎ¶Ñ + Ìå®Îî©ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Í≤πÏπ® Ïó¨Î∂Ä ÌåêÎã®
  });
};

// ÌéòÏù¥ÏßÄ ÎÜíÏù¥Í∞Ä Î≥ÄÌï† Îïå Ïª®ÌÖåÏù¥ÎÑàÏùò ÎÜíÏù¥Î•º Ï°∞Ï†ïÌïòÎäî Ìö®Í≥º Ï∂îÍ∞Ä
useEffect(() => {
  if (containerRef.current) {
    containerRef.current.style.height = `${pageHeight}px`;
  }
}, [pageHeight]); 

  const calculateDistance = (x1, y1, x2, y2) => {
    return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);
  };

  const getClickMessage = (clicks) => {
    if (clicks < 15) {
      return 'ÏïÑÏù¥ÎîîÏñ¥üå±';
    } else if (clicks >= 15 && clicks < 50) {
      return 'ÏÑ±Ï∑®üî•';
    } else if (clicks >= 50 && clicks < 100) {
      return 'ÏÇ∞ÎèÖÍ∏∞üòà';
    } else {
      return 'ÌôïÏ†ïÎêú ÎØ∏Îûò‚≠êÔ∏è';
    }
  };


  
  return (
    <div className="main-container">
    <div className="circles-container" ref={containerRef}>
        {circles.map((circle, index) => (
          <div
            key={`test-${circle.id}`}
            className={`circle ${circle.isBouncing ? 'bounce' : ''}`}
            style={{
              left: circle.position.left,
              top: circle.position.top,
              backgroundColor: circle.color,
              transform: `scale(${1 + Math.floor(circle.clicks / 20) * 0.1})`
            }}
            onClick={() => handleComponentClick(index)}
          >
            <span className="circle-text">{circle.text}</span>
            <span className="circle-text">{getClickMessage(circle.clicks)}: {circle.clicks || 0}</span>
           
            <div className="time-bar-container">
              <div
                className="time-bar"
                style={{ width: `${circle.remainingTime}%` }}
              ></div>
            </div>
          </div>
        ))}
      </div>

      <div className="input-container" style={{ position: 'fixed', bottom: 0 }}>
        <input
          type="text"
          value={inputText}
          onChange={handleInputChange}
          onKeyDown={handleInputKeyDown}
          onKeyUp={() => setIsTyping(false)}
          className="text-input"
        />
        <button onClick={handleButtonClick} className="main-button">ÏûÖÎ†•</button>
        <button onClick={handleResetButtonClick} className="main-button">Ï¥àÍ∏∞Ìôî</button>
      </div>
    </div>
  );
}

export default MainPage;